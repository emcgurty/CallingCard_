Dear Prospective Employer,

You have discovered my calling card, a fully functional Ruby on Rails application, tested primarily in Mozilla FireFox.  
This sample application is derived from a Petition web-site that I deployed successfully via Dream Host, www.banumva.org.  
It's not perfect, largely because I am working in a time constraint, e.g. I need to find a job!  

What's lacking is that I had difficulty in preventing the ROR text_area from being user resized, and reconciling differences between FireFox
 and MS Internet Explorer and other browsers to name of a couple.

My application reflects a strong grasp of the following:

~	Ruby, the language
~	Ruby on Rails, the application development API
~	ROR caching concepts and use
~	Database design and development
~	Database interactivity 
~	ROR model validation
~	CSS concepts and use
~	JavaScript concepts and use
~	Auto-increment "id" vs. UUID 
~	Overriding standard controller methods
~	Use of router.rb
~	Use of database.yml
~	Presentation caching with a Sweeper
~	email Notifiers
~	HTML concepts and use
~	Application navigation
~	Presentation of an attractive and readable GUI
~	Coding security: Private controller functions, use of the h() function, disabling use of "Back" functionality, preventing malicious code from being user entered, presenting urls and email addresses in a www (dot) or name (at) format.
~	Benchmarking, e.g., I elected to use my _groupsof partial rather an ROR's Pagination, and tested Model.find(:all), verses Model.connection.execute(Select *..) and Model.connection.execute(Select field names..).
~	For fun implemented Jacob Seidelin’s MojoMagnify Javascript, an interesting scaling translation illusion.  Behaves very well in IE and poorly in FoxFire.
~	Implemented Fast Image to learn the pixel size of images, which I will eventually use to resize images, e.g., thumbnail-sized.
~	Implemented restful_authenication
~	Implemented UUID as a primary key 
~     Implemented primary and foreign keys
~     Implemented an Observer
~	Rather than saving images to the database to store on server.  Rewrote send_data, particularly.

What is either not complete or not reflected in the application:

~	In generating presentation HTML, I prefer to use tables.  I haven't done much research as to recent trends in HTML presentation, I am sure that there are alternatives vastly easier than tables.

~	I think that ROR testing units are indispensable.  Vastly accelerates testing on database validation for example.  
            One can create so many testing scenarios….  And an assertion failure is so very often a “good thing”.

~	There is a plethora of plug-ins for ROR, I aware of quite a few of them.  For this demonstration purpose I chose to keep my 
            calling-card as native as possible.

~	I didn’t provide JavaScript functionality to condense and/or enhance presentation text, yet I have in previous applications.

~	I am terrible with creating images, using Flash, building animation … great with pdf interaction API.  I have explored 
            DreamWorks and the like. So odd because I am rather good in painting, drawing and textile work… the classical way. J

~	I am very aware of ROR migrations with ‘generate migration’, scaffolding and rake db:migrate, however I found 
            development much easier in just interacting with MySQL.

~	At a performance level, the considerable value in partitioning a database (sharding) either physically, 
           geographically or functionally, and in Master/Slave replication.

As I mentioned above, I cannot claim that my application is perfect nor that my understanding is complete.  
However, I do believe that I am offering an earnest, valuable and respectable effort: I generated all of the code and 
functioned entirely from the Ruby prompt (IRB) in either MS DOS or Linux, e.g., I did not use an IDE.

If you have any questions or concerns, please do not hesitate to ask.  Otherwise, I look forward to hearing from you in the near future.

All the best,

Elizabeth McGurty

